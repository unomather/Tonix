[versions]
agp = "8.11.2"
android-compileSdk = "36"
android-minSdk = "26"
android-targetSdk = "36"
androidx-activity = "1.11.0"
androidx-lifecycle = "2.9.5"
composeHotReload = "1.0.0-rc02"
composeMultiplatform = "1.9.1"
kotlin = "2.2.21"
ktor = "3.3.1"
coil = "3.3.0"
coroutines = "1.10.2"
multiplatform-settings = "1.3.0"
koin = "4.1.1"
flowmvi = "3.2.0"
decompose = "3.4.0"
essenty = "2.5.0"
kotlin-date-time = "0.7.1"
kotlin-serialization-json = "1.9.0"

[bundles]
kotlin = [
    "coroutines",
    "kotlin-date-time",
    "kotlin-serialization-json"
]
koin = [
    "koin",
    "koin-compose"
]
mvi = [
    "mvi-core",
    "mvi-compose",
    "mvi-savedstate",
    "mvi-essenty",
    "mvi-essenty-compose"
]
coil = [
    "coil",
    "coil-svg",
    "coil-network-images",
    "coil-network-cache-control"
]
shared-preferences = [
    "multiplatform-settings",
    "multiplatform-settings-coroutines",
    "multiplatform-settings-observable",
    "multiplatform-settings-serialization"
]
decompose = [
    "decompose",
    "decompose-extensions",
    "decompose-extensions-experimental",
    "essenty-lifecycle",
    "essenty-state-keeper",
    "essenty-instance-keeper"
]
ktor-client = [
    "ktor-serialization",
    "ktor-kotlin-serialization",
    "ktor-client-core",
    "ktor-client-js",
    "ktor-client-logging",
    "ktor-client-content-negotiation"
]

[libraries]
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity" }
androidx-lifecycle-viewmodelCompose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidx-lifecycle" }
androidx-lifecycle-runtimeCompose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
#####################
### GRADLE PLUGIN ###
#####################
android-gradle-plugin = { module = "com.android.tools.build:gradle", version.ref = "agp" }
kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
compose-gradle-plugin = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "composeMultiplatform" }
##################
### NAVIGATION ###
##################
decompose = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-extensions = { module = "com.arkivanov.decompose:extensions-compose", version.ref = "decompose" }
decompose-extensions-experimental = { module = "com.arkivanov.decompose:extensions-compose-experimental", version.ref = "decompose" }
essenty-lifecycle = { module = "com.arkivanov.essenty:lifecycle", version.ref = "essenty" }
essenty-state-keeper = { module = "com.arkivanov.essenty:state-keeper", version.ref = "essenty" }
essenty-instance-keeper = { module = "com.arkivanov.essenty:instance-keeper", version.ref = "essenty" }
###########
### MVI ###
###########
mvi-core = { module = "pro.respawn.flowmvi:core", version.ref = "flowmvi" }
mvi-compose = { module = "pro.respawn.flowmvi:compose", version.ref = "flowmvi" }
mvi-savedstate = { module = "pro.respawn.flowmvi:savedstate", version.ref = "flowmvi" }
mvi-essenty = { module = "pro.respawn.flowmvi:essenty", version.ref = "flowmvi" }
mvi-essenty-compose = { module = "pro.respawn.flowmvi:essenty-compose", version.ref = "flowmvi" }
##############
### KOTLIN ###
##############
kotlin-date-time = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlin-date-time" }
kotlin-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlin-serialization-json" }
############
### KOIN ###
############
koin = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin" }
koin-android = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koin" }
########################################
### MULTIPLATFORM SHARED PREFERENCES ###
########################################
multiplatform-settings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatform-settings" }
multiplatform-settings-coroutines = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "multiplatform-settings" }
multiplatform-settings-observable = { module = "com.russhwolf:multiplatform-settings-make-observable", version.ref = "multiplatform-settings" }
multiplatform-settings-serialization = { module = "com.russhwolf:multiplatform-settings-serialization", version.ref = "multiplatform-settings" }
##################
### COROUTINES ###
##################
coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
############
### COIL ###
############
coil = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coil" }
coil-svg = { module = "io.coil-kt.coil3:coil-svg", version.ref = "coil" }
coil-network-images = { module = "io.coil-kt.coil3:coil-network-ktor3", version.ref = "coil" }
coil-network-cache-control = { module = "io.coil-kt.coil3:coil-network-cache-control", version.ref = "coil" }
############
### KTOR ###
############
ktor-serialization = { module = "io.ktor:ktor-serialization", version.ref = "ktor" }
ktor-kotlin-serialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-ios = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
composeHotReload = { id = "org.jetbrains.compose.hot-reload", version.ref = "composeHotReload" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "composeMultiplatform" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
androidKotlinMultiplatformLibrary = { id = "com.android.kotlin.multiplatform.library", version.ref = "agp" }
androidLint = { id = "com.android.lint", version.ref = "agp" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }